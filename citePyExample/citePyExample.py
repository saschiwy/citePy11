 # This File is autogenerated with citePy11 (Author: Sascha Schiwy)
        
import os
import sys
import enum

script_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(script_path)

import __citePyExample__ as cpp_m

class SecondNamespace:
    class ExternalStruct:
        class Test(enum.Enum):
            a = 0
            b = 1

    def __init__(self):
        self.__m__ = cpp_m.SecondNamespace_ExternalStruct()
    
    
        @property
        def testEnum(self):
            return self.__m__.testEnum

        @testEnum.setter
        def testEnum(self, value):
            self.__m__.testEnum = value

        @property
        def exampleDouble(self):
            return self.__m__.exampleDouble

        @exampleDouble.setter
        def exampleDouble(self, value):
            self.__m__.exampleDouble = value

        @property
        def listWithNumbersToAdd(self):
            return self.__m__.listWithNumbersToAdd

        @listWithNumbersToAdd.setter
        def listWithNumbersToAdd(self, value):
            self.__m__.listWithNumbersToAdd = value


class CitePyExampleNS:
    class ExampleEnum(enum.Enum):
        add = 0
        subtract = 1

    class ExampleStruct:
        """
        An example structure.
        
        """
        
        @property
        def left(self):
            """ The left"""
            return self.__m__.left

        @left.setter
        def left(self, value):
            self.__m__.left = value

        @property
        def right(self):
            """ The right"""
            return self.__m__.right

        @right.setter
        def right(self, value):
            self.__m__.right = value

        def __init__(self):
            """
            Default constructor
            
            :fn: ExampleStruct();
            """
            
            self.__m__ = cpp_m.CitePyExampleNS_ExampleStruct()
        
        
        def __init__(self, left, right):
            """
            Constructor
            
            :param left: The left.
            :param right: The right.
            
            :fn: ExampleStruct(double left, double right);
            """
            
            self.__m__ = cpp_m.CitePyExampleNS_ExampleStruct(left, right)
        
        
        def set(self, val1, val2):
            return self.__m__.set(val1, val2)
        
        def getLeft(self):
            return self.__m__.getLeft()
        

    class IExample:
        """
        An example class to show the usage ot citePy
        
        """
        
        def __init__(self):
            self.__m__ = cpp_m.CitePyExampleNS_IExample.createLibrary()

        def add(self, left, right):
            """
            Adds two doubles
            
            :param left: The left.
            :param right: The right.
            
            :fn: virtual double IExample::add(double left, double right) = 0;
            """
            
            return self.__m__.add(left, right)
        
        def subtract(self, left, right):
            """
            Subtracts two doubles
            
            :param left: The left.
            :param right: The right.
            
            :fn: virtual double IExample::subtract(double left, double right) = 0;
            """
            
            return self.__m__.subtract(left, right)
        
        def compute(self, option, values):
            """
            Computes
            
            :param option: The option.
            :param values: The values.
            
            :fn: virtual double IExample::compute(ExampleEnum option, ExampleStruct values) = 0;
            """
            
            return self.__m__.compute(option, values)
        
        def compute(self, values):
            """
            Ass all the given values, inside the vector
            
            :param values: The values.
            
            :fn: virtual double IExample::compute(SecondNamespace::ExternalStruct values) = 0;
            """
            
            return self.__m__.compute(values)
        
        def registerCallback(self, cb):
            """
            Registers the callback described by cb
            
            :param cb: The cb.
            
            :fn: virtual void IExample::registerCallback(ExampleCallbackDefinition cb) = 0;
            """
            
            return self.__m__.registerCallback(cb)
        
        def addReferenced(self, result, left, right):
            """
            Adds a referenced
            
            :param result: The result.
            :param left: The left.
            :param right: The right.
            
            :fn: virtual void IExample::addReferenced(double& result, double left, double right) = 0;
            """
            
            return self.__m__.addReferenced(result, left, right)
        

