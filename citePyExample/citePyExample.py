 # This File is autogenerated with citePy11 (Author: Sascha Schiwy)
        
import os
import sys
import enum

script_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(script_path)

import __citePyExample__ as cpp_m

class SecondNamespace:
    class ExternalStruct:
        class Test(enum.Enum):
            a = 0
            b = 1

    def __init__(self):
        self.__m__ = cpp_m.SecondNamespace_ExternalStruct()
    
    
        @property
        def testEnum(self):
            return self.__m__.testEnum

        @testEnum.setter
        def testEnum(self, value):
            self.__m__.testEnum = value

        @property
        def exampleDouble(self):
            return self.__m__.exampleDouble

        @exampleDouble.setter
        def exampleDouble(self, value):
            self.__m__.exampleDouble = value

        @property
        def listWithNumbersToAdd(self):
            return self.__m__.listWithNumbersToAdd

        @listWithNumbersToAdd.setter
        def listWithNumbersToAdd(self, value):
            self.__m__.listWithNumbersToAdd = value


class CitePyExampleNS:
    class ExampleStruct:
        @property
        def left(self):
            return self.__m__.left

        @left.setter
        def left(self, value):
            self.__m__.left = value

        @property
        def right(self):
            return self.__m__.right

        @right.setter
        def right(self, value):
            self.__m__.right = value

        def __init__(self, left, right):
            self.__m__ = cpp_m.CitePyExampleNS_ExampleStruct(left, right)
        
        
        def set(self, val1, val2):
            return self.__m__.set(val1, val2)
        
        def getLeft(self):
            return self.__m__.getLeft()
        

    class IExample:
        """
        This is a test class
        """
        def __init__(self):
            self.__m__ = cpp_m.CitePyExampleNS_IExample.createLibrary()

        def add(self, left, right):
            """
            Adds two numbers together

            :param left: The left number
            :param right: The right number

            :fn: int add(int left, int right)

            :return: The sum of the two numbers
            """
            return self.__m__.add(left, right)
        
        def subtract(self, left, right):
            return self.__m__.subtract(left, right)
        
        def compute(self, option, values):
            return self.__m__.compute(option, values)
        
        def compute(self, values):
            return self.__m__.compute(values)
        
        def registerCallback(self, cb):
            return self.__m__.registerCallback(cb)
        
        def addReferenced(self, result, left, right):
            return self.__m__.addReferenced(result, left, right)
        

