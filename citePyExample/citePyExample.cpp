/* This File is autogenerated with citePy11 (https://github.com/saschiwy/citePy11)
 * author: Sascha Schiwy
 */

// Solve VS2022 Bug https://www.reddit.com/r/cpp_questions/comments/qpo93t/error_c2039_invalid_parameter_is_not_a_member_of/
#ifdef _WIN32
#include <corecrt.h>
#endif
        
#include <pybind11/functional.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

#include "AdditionalHeader.h"
#include "IExample.h"

namespace py = pybind11;
PYBIND11_MODULE(citePyExample, m)
{
    /// ---- Declarations ---- ///   
	py::enum_<CitePyExampleNS::ExampleEnum> exampleEnum(m, "ExampleEnum", R"doc(/*!
* \enum    ExampleEnum
*
* \brief   Values that represent example enums
*/)doc");
	py::class_<SecondNamespace::ExternalStruct> externalStruct(m, "ExternalStruct");
	py::class_<CitePyExampleNS::ExampleStruct> exampleStruct(m, "ExampleStruct", R"doc(/*!
* \struct  ExampleStruct
*
* \brief   An example structure.
*/)doc");
	py::class_<CitePyExampleNS::IExample> iExample(m, "IExample", R"doc(/*!
* \class   IExample
*
* \brief   An example class to show the usage ot citePy
*/)doc");

	/// ---- Enum definitions ---- ///
	exampleEnum
		.value("add", CitePyExampleNS::ExampleEnum::add)
		.value("subtract", CitePyExampleNS::ExampleEnum::subtract)
		.export_values();

	/// ---- Class definitions ---- ///
	externalStruct
		/// Static Methods

		/// Member Variables
		.def_readwrite("listWithNumbersToAdd", &SecondNamespace::ExternalStruct::listWithNumbersToAdd)

		/// Constructors
		.def(py::init<>(), R"doc(Autogenerated constructor)doc")

		/// Member Methods
	;

	exampleStruct
		/// Static Methods

		/// Member Variables
		.def_readwrite("left", &CitePyExampleNS::ExampleStruct::left, R"doc(///< The left)doc")
		.def_readwrite("right", &CitePyExampleNS::ExampleStruct::right, R"doc(///< The right)doc")

		/// Constructors
		.def(py::init<>(), R"doc(/*!
* \fn  ExampleStruct();
*
* \brief   Default constructor
*/)doc")
		.def(py::init<double, double>(), R"doc(/*!
* \fn  ExampleStruct(double left, double right);
*
* \brief   Constructor
*
* \param   left    The left.
* \param   right   The right.
*/)doc")

		/// Member Methods
		.def("getLeft", py::overload_cast<>(&CitePyExampleNS::ExampleStruct::getLeft, py::const_))
	;

	iExample
		/// Static Methods
		.def_static("createLibrary", [](){return CitePyExampleNS::IExample::createLibrary();}, R"doc(/*!
* \fn  static std::unique_ptr<IExample> IExample::createLibrary();
*
* \brief   Instantiates a library object without knowledge about the implementation
*
* \returns The new library.
*/)doc")

		/// Member Variables

		/// Constructors

		/// Member Methods
		.def("add", py::overload_cast<double, double>(&CitePyExampleNS::IExample::add, py::const_), R"doc(/*!
* \fn  virtual double IExample::add(double left, double right) = 0;
*
* \brief   Adds two doubles
*
* \param   left    The left.
* \param   right   The right.
*
* \returns the result.
*/)doc")
		.def("subtract", py::overload_cast<double, double>(&CitePyExampleNS::IExample::subtract), R"doc(/*!
* \fn  virtual double IExample::subtract(double left, double right) = 0;
*
* \brief   Subtracts two doubles
*
* \param   left    The left.
* \param   right   The right.
*
* \returns the result.
*/)doc")
		.def("compute", py::overload_cast<CitePyExampleNS::ExampleEnum, CitePyExampleNS::ExampleStruct>(&CitePyExampleNS::IExample::compute), R"doc(/*!
* \fn  virtual double IExample::compute(ExampleEnum option, ExampleStruct values) = 0;
*
* \brief   Computes
*
* \param   option  The option.
* \param   values  The values.
*
* \returns the result.
*/)doc")
		.def("compute", py::overload_cast<const std::vector<double>&>(&CitePyExampleNS::IExample::compute), R"doc(/*!
* \fn  virtual double IExample::compute(SecondNamespace::ExternalStruct values) = 0;
*
* \brief   Ass all the given values, inside the vector
*
* \param   values  The values.
*
* \returns A double.
*/)doc")
		.def("compute", py::overload_cast<SecondNamespace::ExternalStruct>(&CitePyExampleNS::IExample::compute), R"doc(/*!
* \fn  virtual double IExample::compute(SecondNamespace::ExternalStruct values) = 0;
*
* \brief   Computes the given values
*
* \param   values  The values.
*
* \returns A double.
*/)doc")
		.def("registerCallback", py::overload_cast<CitePyExampleNS::ExampleCallbackDefinition>(&CitePyExampleNS::IExample::registerCallback), R"doc(/*!
* \fn  virtual void IExample::registerCallback(ExampleCallbackDefinition cb) = 0;
*
* \brief   Registers the callback described by cb
*
* \param   cb  The cb.
*/)doc")
		.def("addReferenced", [](CitePyExampleNS::IExample& self, double& result, double left, double right) {double __result = result; self.addReferenced(__result, left, right); return std::make_tuple(__result); }, R"doc(/*!
* \fn  virtual void IExample::addReferenced(double& result, double left, double right) = 0;
*
* \brief   Adds a referenced
*
* \param [in,out]  result  The result.
* \param           left    The left.
* \param           right   The right.
*/)doc")
	;

}