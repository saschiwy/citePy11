/* This File is autogenerated with citePy11 (https://github.com/saschiwy/citePy11)
 * author: Sascha Schiwy
 */

// Solve VS2022 Bug https://www.reddit.com/r/cpp_questions/comments/qpo93t/error_c2039_invalid_parameter_is_not_a_member_of/
#ifdef _WIN32
#include <corecrt.h>
#endif
        
#include <pybind11/functional.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

#include "AdditionalHeader.h"
#include "AdditionalHeader2.h"
#include "IExample.h"
#include "MyInteger.h"
    
namespace py = pybind11;

PYBIND11_MODULE(__citePyExample__, m) {
py::enum_<SecondNamespace::ExternalStruct::Test> (m, "SecondNamespace_ExternalStruct_Test")
	.value("a", SecondNamespace::ExternalStruct::Test::a)
	.value("b", SecondNamespace::ExternalStruct::Test::b)
	.export_values();

py::class_<SecondNamespace::ExternalStruct> (m, "SecondNamespace_ExternalStruct")
.def_readwrite("testEnum", &SecondNamespace::ExternalStruct::testEnum)
.def_readwrite("exampleDouble", &SecondNamespace::ExternalStruct::exampleDouble)
.def_readwrite("listWithNumbersToAdd", &SecondNamespace::ExternalStruct::listWithNumbersToAdd)
.def(py::init<>());

py::class_<SecondNamespace::ExternalStruct2> (m, "SecondNamespace_ExternalStruct2")
.def_readwrite("testEnum", &SecondNamespace::ExternalStruct2::testEnum)
.def(py::init<>());

py::class_<four::namespaces::at::once::ExternalStruct3> (m, "four_namespaces_at_once_ExternalStruct3")
.def_readwrite("testInt", &four::namespaces::at::once::ExternalStruct3::testInt)
.def("setTestInt", [](four::namespaces::at::once::ExternalStruct3& self, int value) {return self.setTestInt(value);})
.def(py::init<>());

py::enum_<CitePyExampleNS::ExampleEnum> (m, "CitePyExampleNS_ExampleEnum")
	.value("add", CitePyExampleNS::ExampleEnum::add)
	.value("subtract", CitePyExampleNS::ExampleEnum::subtract)
	.export_values();

py::class_<CitePyExampleNS::ExampleStruct> (m, "CitePyExampleNS_ExampleStruct")
.def_readwrite("left", &CitePyExampleNS::ExampleStruct::left)
.def_readwrite("right", &CitePyExampleNS::ExampleStruct::right)
.def(py::init<>())
.def(py::init<double, double>())
.def("set", [](CitePyExampleNS::ExampleStruct& self, double val1) {return self.set(val1);})
.def("getLeft", [](CitePyExampleNS::ExampleStruct& self) {return self.getLeft();})
;

py::class_<CitePyExampleNS::IExample> (m, "CitePyExampleNS_IExample")
.def("add", [](CitePyExampleNS::IExample& self, double left, double right) {return self.add(left, right);})
.def("subtract", [](CitePyExampleNS::IExample& self, double left, double right) {return self.subtract(left, right);})
.def("compute", [](CitePyExampleNS::IExample& self, CitePyExampleNS::ExampleEnum option, CitePyExampleNS::ExampleStruct values) {return self.compute(option, values);})
.def("compute", [](CitePyExampleNS::IExample& self, const std::vector<double>& values) {return self.compute(values);})
.def("compute", [](CitePyExampleNS::IExample& self, SecondNamespace::ExternalStruct values) {return self.compute(values);})
.def("registerCallback", [](CitePyExampleNS::IExample& self, CitePyExampleNS::IExample::ExampleCallbackDefinition cb) {return self.registerCallback(cb);})
.def("addReferenced", [](CitePyExampleNS::IExample& self, const double& result, double left, double right) {auto __result = result; self.addReferenced(__result, left, right); return __result;})
;

py::class_<MyInteger> (m, "MyInteger")
.def(py::init<>())
.def(py::init<int>())
.def("__add__", [](MyInteger& self, const MyInteger& other) {return self.operator+(other);})
.def("__sub__", [](MyInteger& self, const MyInteger& other) {return self.operator-(other);})
.def("__mul__", [](MyInteger& self, const MyInteger& other) {return self.operator*(other);})
.def("__truediv__", [](MyInteger& self, const MyInteger& other) {return self.operator/(other);})
.def("__eq__", [](MyInteger& self, const MyInteger& other) {return self.operator==(other);})
.def("__ne__", [](MyInteger& self, const MyInteger& other) {return self.operator!=(other);})
.def("__lt__", [](MyInteger& self, const MyInteger& other) {return self.operator<(other);})
.def("__le__", [](MyInteger& self, const MyInteger& other) {return self.operator<=(other);})
.def("__gt__", [](MyInteger& self, const MyInteger& other) {return self.operator>(other);})
.def("__ge__", [](MyInteger& self, const MyInteger& other) {return self.operator>=(other);})
.def("__add__", [](MyInteger& self, const int& other) {return self.operator+(other);})
.def("__sub__", [](MyInteger& self, const int& other) {return self.operator-(other);})
.def("__mul__", [](MyInteger& self, const int& other) {return self.operator*(other);})
.def("__truediv__", [](MyInteger& self, const int& other) {return self.operator/(other);})
.def("__eq__", [](MyInteger& self, const int& other) {return self.operator==(other);})
.def("__ne__", [](MyInteger& self, const int& other) {return self.operator!=(other);})
.def("__lt__", [](MyInteger& self, const int& other) {return self.operator<(other);})
.def("__le__", [](MyInteger& self, const int& other) {return self.operator<=(other);})
.def("__gt__", [](MyInteger& self, const int& other) {return self.operator>(other);})
.def("__ge__", [](MyInteger& self, const int& other) {return self.operator>=(other);})
.def("getValue", [](MyInteger& self) {return self.getValue();})
.def_static("add", [](MyInteger& self, MyInteger a, MyInteger b) {return self.add(a, b);})
;

}
